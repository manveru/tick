= Tick

Tick is a distributed ticket tracking system hosted inside a Git repo.

== Overview

Distributed ticket tracking is still a very experimental field with little common practice.
Tick tries to tackle the problem in a simple manner, that is distinct from the
well-known ditz and ticgit ticket trackers or the way fossil handles it.

The approach tries to take the best properties of the current solutions and
distill them to something much easier to approach.
Two properties that have high priority is portability and fidelity of ticket data and speed.
Given that this tries to be a git-based ticket-tracker, we will take advantage
of using a separate branch, but will do so in a manner that makes concurrent
access possible.
All of these features will have more impact on disk space than on memory usage,
and I think this is a reasonable tradeoff as most ticket trackers have a low
amount of data but need to work as fast as possible.
It is also important that graphical, CLI, or web-frontends do not lock the
repository they operate on, but rather operate atomically while ensuring integrity.

== Integration

I will try to provide integration with other ticket systems by working on
synchronization features, this area will need most contribution as I do not
know every ticket tracker under the sun.

== Dependencies

Operation of Tick requires the `GitStore` and `JSON` libraries to be installed.
JSON ships with Ruby since version 1.9, so in most cases you will not have to
install it, there are API-compatible gems as pure ruby and as C-extension
available, in most cases the C-extension should be preferred since it's faster.

== Storage

Every 'object' in Tick is stored as a directory containing its properties. So
every Tick repository is structured as a tree.

An example might look like following, the type in square brackets.

  project/tick [repo/branch]
    Milestone-d848c9713eb1c248d99ae01d257fe9b269623d27 [Milestone]
      author        [property]
      creation_time [property]
      description   [property]
      name          [property]
      status        [property]
      target_date   [property]
      tickets       [property]
        Ticket-8843d7f92416211de9ebb963ff4ce28125932878 [Ticket]
          tags    [property]
          title   [property]
          content [property]
          author  [property]
          comments [property]
            Comment-0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33 [Comment]
              author  [property]
              content [property]
            Comment-62cdb7020ff920e5aa642c3d4066950dd1f01f4d [Comment]
              author  [property]
              content [property]

Tickets are stored in a tree, when creating a new ticket, a directory is
created for it, named after the SHA1 checksum of its initial contents.

Tickets are further nested inside milestone directories, every milestone
directory may also have properties inside the directory, and is named after the
SHA1 checksum of the initial contents.
Initially, there will be one milestone called 'future', which will receive
tickets by default unless another milestone is checked out or passed as
argument on ticket creation.
Tickets can also be moved between open milestones.

This directory acts as container for any further changes to the ticket.

In order to ensure fidelity of data and cross-platform compatibility, we will
not store the actual data inside the filename, as ticgit does.

Every property of a ticket is given one file with the contents serialized to
JSON. JSON is chosen because it is significantly faster than YAML (which ditz
uses) and can be parsed easily in just about every programming language since
the structure is much simpler.

In order to minimize merge conflicts, I will keep every property of a ticket in
a separate file, following part of the ticgit convention for naming the file.

On the first access to a ticket, the properties will be merged down into a
single nested JSON representation that is stored outside of the repository,
which will be updated when modifications are made, this allows us to keep
access time fast without having read a lot of files, while keeping the tree as
basis for modifications to avoid conflicts.
Usually these merge-files are stored in `Dir.tmpdir`.

You might have noticed that the tree is not meant to be edited by hand, but is
fully tuned to fast and precise machine modification that avoids the impact of
parsing a represenation that would be more human-readable.

=== Milestone

A milestone has following properties:

* Name
* Author
* Creation date
* Target date
* Status (open, closed)
* Description

=== Tags

Tags can be arbitrary unicode strings, but may not contain the ',' character
and any padding spaces, which are used by commands manipulating them.

The file containing tags will be a sorted array, one item per line, as
generated by `JSON.pretty_unparse`.

=== Time

Time is stored as unix timestamps.
